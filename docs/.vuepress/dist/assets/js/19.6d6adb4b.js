(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{185:function(n,t,a){"use strict";a.r(t);var s=a(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("div",{staticClass:"language-ocaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[a("span",{attrs:{class:"token comment"}},[n._v("(* Scilla 合约架构 *)")]),n._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(***************************************************)")]),n._v("\n"),a("span",{attrs:{class:"token comment"}},[n._v("(*               相关依赖库，以library开头            *)")]),n._v("\n"),a("span",{attrs:{class:"token comment"}},[n._v("(***************************************************)")]),n._v("\n\nlibrary MyContractLib\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* 书写依赖库代码 *)")]),n._v("\n\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(***************************************************)")]),n._v("\n"),a("span",{attrs:{class:"token comment"}},[n._v("(*             合约定义部分，以contract开头           *)")]),n._v("\n"),a("span",{attrs:{class:"token comment"}},[n._v("(***************************************************)")]),n._v("\n\ncontract MyContract\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* 不可变字段声明 *)")]),n._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[n._v("(")]),n._v("vname"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1"),a("span",{attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n vname"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2"),a("span",{attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),a("span",{attrs:{class:"token comment"}},[n._v('(*\n  # init.json\n  # 部署之前通过 Scilla-Checker获取初始化参数数据\n  # 即 ABI\n  # 在部署之后, 可以通过 GetSmartContractInit 获取\n [\n     {\n         "vname" : "vname_1",\n         "type" : "type_1",\n         "value" : "0x1234567890123456789012345678901234567890"\n     },\n     {\n         "vname" : "vname_2",\n         "type" : "type_2" ,\n         "value" : "199"\n     },\n\n     # ......更多参数\n\n     # 部署时的默认参数:\n     {\n         "vname" : "_creation_block",\n         "type" : "BNum",\n         "value" : "1"\n     }\n ]\n*)')]),n._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* 可变字段声明 *)")]),n._v("\n\nfield vname"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1 "),a("span",{attrs:{class:"token operator"}},[n._v("=")]),n._v(" init"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("val"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1\nfield vname"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2 "),a("span",{attrs:{class:"token operator"}},[n._v("=")]),n._v(" init"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("val"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2\n\n"),a("span",{attrs:{class:"token comment"}},[n._v('(*\n  # state.json\n  # 在合约部署后通过 GetSmartContractState 获取\n  [\n    {\n      "vname": "backers",\n      "type": "Map (ByStr20) (Uint128)",\n      "value": []\n    },\n    {\n      "vname": "funded",\n      "type": "Bool",\n      "value":\n      {\n        "constructor": "False",\n        "argtypes": [],\n        "arguments": []\n      }\n    },\n    {\n      "vname": "_balance",\n      "type": "Uint128",\n      "value": "0"\n    }\n  ]\n*)')]),n._v("\n\n\n\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* Transitions 转换器 *)")]),n._v("\n\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* Transition 方法定义  *)")]),n._v("\ntransition firstTransition "),a("span",{attrs:{class:"token punctuation"}},[n._v("(")]),n._v("param"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("1"),a("span",{attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" param"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2 "),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" type"),a("span",{attrs:{class:"token punctuation"}},[n._v("_")]),n._v("2"),a("span",{attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),a("span",{attrs:{class:"token comment"}},[n._v("(* Transition 转换体 *)")]),n._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[n._v("end")]),n._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v("(* Transition 方法定义  *)")]),n._v("\ntransition TransferFrom "),a("span",{attrs:{class:"token punctuation"}},[n._v("(")]),n._v("from"),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" ByStr20"),a("span",{attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{attrs:{class:"token keyword"}},[n._v("to")]),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" ByStr20"),a("span",{attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" tokens"),a("span",{attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" Unit128"),a("span",{attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),a("span",{attrs:{class:"token comment"}},[n._v("(* Transition 转换体 *)")]),n._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[n._v("end")]),n._v("\n\n\n\n"),a("span",{attrs:{class:"token comment"}},[n._v('(*\n\n# message.json\n# Transitions将在合约部署后, 每一个Transaction都通过它作为配置文件\n# 使用createTransaction与之交互\n\n  {\n    "_tag"    : "TransferFrom",\n    "_amount" : "0",\n    "_sender" : "0x64345678901234567890123456789012345678cd",\n    "params"  : [\n      {\n        "vname" : "from",\n        "type"  : "ByStr20",\n        "value" : "0x1234567890123456789012345678901234567890"\n      },\n      {\n        "vname" : "to",\n        "type"  : "ByStr20",\n        "value" : "0x78345678901234567890123456789012345678cd"\n      },\n      {\n        "vname" : "tokens",\n        "type"  : "Uint128",\n        "value" : "500"\n      }\n    ]\n  }\n*)')]),n._v("\n")])])]),a("h2",{attrs:{id:"各种参数详细解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各种参数详细解释","aria-hidden":"true"}},[n._v("#")]),n._v(" 各种参数详细解释")]),n._v(" "),a("h3",{attrs:{id:"immutable-fields（初始化字段，不可变）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutable-fields（初始化字段，不可变）","aria-hidden":"true"}},[n._v("#")]),n._v(" Immutable Fields（初始化字段，不可变）")]),n._v(" "),a("ul",[a("li",[n._v("对应"),a("code",[n._v("init.json")])]),n._v(" "),a("li",[n._v("部署前可写，部署后只读")]),n._v(" "),a("li",[n._v("合约初始化，使用它，一旦部署，不可更改")]),n._v(" "),a("li",[n._v("合约部署后，只读，通过 GetSmartContractInit 读取")])]),n._v(" "),a("h3",{attrs:{id:"blockchian-state-fields-区块链状态字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockchian-state-fields-区块链状态字段","aria-hidden":"true"}},[n._v("#")]),n._v(" Blockchian State Fields(区块链状态字段)")]),n._v(" "),a("ul",[a("li",[n._v("对应"),a("code",[n._v("blockchain.json")])]),n._v(" "),a("li",[n._v("部署前可写，部署后可读写")]),n._v(" "),a("li",[n._v("也是在合约部署的时候发送，"),a("code",[n._v("BLOCKNUMBER")]),n._v("这个字段很特殊，不在合约中出现")]),n._v(" "),a("li",[n._v("可获取的方式是 GetLatestTxBlock")])]),n._v(" "),a("h3",{attrs:{id:"mutable-fields（可变状态字段）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutable-fields（可变状态字段）","aria-hidden":"true"}},[n._v("#")]),n._v(" Mutable Fields（可变状态字段）")]),n._v(" "),a("ul",[a("li",[n._v("对应"),a("code",[n._v("state.json")])]),n._v(" "),a("li",[n._v("这里说的可变，指的并不是某个客户端输入发生改变，而是由区块链的总体交互改变")]),n._v(" "),a("li",[n._v("把整个区块链看作一个后端状态机，由这个状态机产生的状态映射到合约的变量上")]),n._v(" "),a("li",[n._v("可以看作是对这个合约进行一系列统计之后的状态结果")]),n._v(" "),a("li",[n._v("合约部署后，通过 GetSmartContractState 读取，实际上并不能直接改变它")])]),n._v(" "),a("h3",{attrs:{id:"message-fields（消息变量）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-fields（消息变量）","aria-hidden":"true"}},[n._v("#")]),n._v(" Message Fields（消息变量）")]),n._v(" "),a("ul",[a("li",[n._v("对应"),a("code",[n._v("message.json")])]),n._v(" "),a("li",[n._v("就是每个客户端访问合约制定的 transition（转换方法）中，输入的各种参数")]),n._v(" "),a("li",[n._v("DApp 前端通过它与合约 transition 进行交互，有一定的约定，比如"),a("code",[n._v("_amount")]),n._v("：消费金额,"),a("code",[n._v("_tag")]),n._v("：方法名,"),a("code",[n._v("_sender")]),n._v("：交互者地址，就是消费参数")]),n._v(" "),a("li",[n._v("其余的变量都要根据方法名对应的参数进行设置")])]),n._v(" "),a("h2",{attrs:{id:"scilla-合约流转和-dapp-交互流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scilla-合约流转和-dapp-交互流程","aria-hidden":"true"}},[n._v("#")]),n._v(" Scilla 合约流转和 Dapp 交互流程")]),n._v(" "),a("ol",[a("li",[n._v("合约源码 -- Scilla Checker --- code.scilla, 获取 ABI")]),n._v(" "),a("li",[n._v("准备部署 -- createTransactionJson -- init.json，blockchain.json，参数格式通过解析 ABI 更准确")]),n._v(" "),a("li",[n._v("开始部署 -- createTransaction -- 获取返回的 txnID 和想办法拿到 contractAddress")]),n._v(" "),a("li",[n._v("Dapp 展示 -- getSmartConract{Init|State|Code} -- 监听 state.json ，Dapp 做出统计和数据展示以及前端的改变")]),n._v(" "),a("li",[n._v("合约交互 -- 获取 ABI，得到合约的 transition 方法名 -- 发送 message.json ，Dapp 做出与合约的交互")]),n._v(" "),a("li",[n._v("上述 4 和 5 循环，直至合约中止")])])])}],!1,null,null,null);e.options.__file="Contract.md";t.default=e.exports}}]);